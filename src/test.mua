make "a readlinst
"a "b ["a ["b [123]]]

print :a
// Output Here:
// [12.0, [12.0], [32.0], add, 1.0, 2.0]


make "b [12 [12] [32] add 1 2]
print thing "b


make "c "b
print thing :c


print add add 1 add 1 add 1 2 3
// 8.0


print lt "abc "b



print (1-(2*3-4*5)--3-3)
// 15.0

make "f [[x y] [make "z add thing "x :y print sub :z thing "y]]
f 1 2

repeat 5 [f 1 2]

make "ff [[x y] [make "z add thing "x :y output :z print :x stop print thing "y]]

make "q ff 1 2
// 1.0
print :q
// 3.0

make "x 98
print (thing "x + 10 *(1-:x))

print random 2*2

print isbool islist [make "asdas 12]

print isempty "
print isempty []

wait 1000

poall

if true [print :pi] [print 1]
if isword "a [print :pi] [print 1]

make "abs [[x] [if lt :x 0 [output mul -1 :x] [output :x] ] ]

make "average [[a b] [ output ((:a+:b)/2)]]
make "sqrt [[x] [make "good_enough [[guess x] [output lt abs (:guess * :guess - :x) 0.001]]make "improve [[guess x] [output average :guess (:x/:guess)]]make "sqrt_iter [[guess x] [if good_enough :guess :x[output :guess][output sqrt_iter improve :guess :x :x]]] output sqrt_iter 1.0 :x]]

print sqrt 10

print lt abs -12 20

make "good_enough [[guess x] [output lt abs (:guess * :guess - :x)  0.001]]
make "improve [[guess x] [output average :guess (:x/:guess)]]
make "sqrt_iter [[guess x] [if good_enough :guess :x[output :guess][output sqrt_iter improve :guess :x :x]]]
make "sqrt [[x] [output sqrt_iter 1.0 :x]]
make "sqrt [[x] [make "good_enough [[guess x] [output lt abs (:guess * :guess - :x) 0.001]]make "improve [[guess x] [output average :guess (:x/:guess)]]make "sqrt_iter [[guess x] [if good_enough :guess :x[output :guess][output sqrt_iter improve :guess :x :x]]] poall output sqrt_iter 1.0 :x]]


//make "guess 2
//make "x 5
//poall
//print abs (:guess * :guess - :x)
//print lt  abs (:guess * :guess -:x) 0.01 0.01  0.01
make "a [make "sd 1 print "sd [make "x 10]]
print first :a
print last :a
print butlast :a
print butfirst :a



make "a "abcdefg
print first :a
print last :a
print butlast :a
print butfirst :a



make "x "abc
make "y [make "xyz 1 [print :xyz]]
make "z [[print 1]]

print sentence :y :z
print list :y :z
print join :y :z
print word :x 123.0
print word :x true


// 记录下更好的实践：
所有内置操作实现为函数，存储在命名空间中
（当前是有返回值的语句和有返回值的操作分开处理）
函数可以有返回值，也可以返回null

重构_List 和 _Word